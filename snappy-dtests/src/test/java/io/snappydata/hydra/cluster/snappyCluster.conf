
hydra.Prms-testDescription = "
This test starts the snappy cluster, initializes snappyContext.
Creates DataFrame and Row,Column Table, loads the parquet data into tables.
And then queries the column table data and verify that the query returns the correct results.
Then it stops the snappyContext and snappy cluster";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/libs/gemfirexd-2.0-BETA.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../../snappy-dtests/build-artifacts/scala-2.10/libs/gemfirexd-scala-tests-0.1.0-SNAPSHOT.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../../snappy-spark/sql/catalyst/build-artifacts/scala-2.10/libs/snappy-spark-catalyst_2.10-1.6.0-SNAPSHOT.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/snappydata-assembly_2.10-0.1.0-SNAPSHOT-hadoop2.4.1.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS/../../libs/derby.jar:$JTESTS/../../libs/derbyclient.jar:$JTESTS/../../libs/gemfire-hydra-tests-2.0-SNAPSHOT.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/datanucleus-api-jdo-3.2.6.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/datanucleus-core-3.2.10.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../../scala-2.10/snappy/lib/datanucleus-rdbms-3.2.9.jar;
hydra.VmPrms-extraClassPaths        += /export/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derby.jar;
hydra.VmPrms-extraClassPaths        += /export/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derbynet.jar;
hydra.VmPrms-extraClassPaths        += /export/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derbyclient.jar;

hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;


THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP leadThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1 " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
  runMode = always
  threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLocator
  runMode = always
  threadGroups = locatorThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyServers
  runMode = always
  threadGroups = snappyStoreThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLeader
  runMode = always
  threadGroups = leadThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappy
  threadGroups = snappyThreads;

INITTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = createDataFrameAndRowColumnTable
  threadGroups = snappyThreads;

TASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = queryColumnTable
  threadGroups = snappyThreads;


CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
  threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
threadGroups = locatorThreads;

hydra.Prms-totalTaskTimeSec           = 200;
hydra.Prms-maxResultWaitSec           = 900;

hydra.Prms-maxCloseTaskResultWaitSec  = 900;
hydra.Prms-serialExecution            = false;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

//hydra.VmPrms-extraVMArgs   = "-XX:PermSize=64M -XX:MaxPermSize=256m"
hydra.VmPrms-extraVMArgs   += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${B}Hosts}, true)"
                             ncf;
hydra.VmPrms-extraVMArgsSUN += "-XX:PermSize=64M -XX:MaxPermSize=256m";

